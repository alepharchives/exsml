#!/bin/sh

case $1 in
  "") cc=cc;;
   *) cc=$1;;
esac
export cc

cd auto-aux
rm -f s.h m.h

# Determine alignment constraints

sh runtest dblalign.c
case $? in
  0) echo "Doubles can be word-aligned.";;
  1) echo "Doubles must be doubleword-aligned."
     echo "#define ALIGN_DOUBLE" >> m.h;;
  *) echo "Something went wrong during alignment determination for doubles."
     echo "I'm going to assume this architecture has alignment constraints over doubles."
     echo "That's a safe bet: Caml Light will work even if it turns out that"
     echo "this architecture actually has no alignment constraints."
     echo "#define ALIGN_DOUBLE" >> m.h;;
esac

# Check for _longjmp and _setjmp

sh runtest setjmp.c
case $? in
  0) echo "_setjmp and _longjmp appear to work. Good!"
     echo "#define HAS__SETJMP" >> s.h;;
  *) echo "No _setjmp, _longjmp. We'll use setjmp and longjmp instead."
esac

# Try to find the type of signal handlers

h=""

for ty in void int; do
  rm -f /tmp/output$$
  if $cc -c -DSIGRETURN=$ty sighandler.c 2>/tmp/output$$; then
    if grep -s -i warning /tmp/output$$; then
      :
    else
      h=$ty
      break
    fi
  fi
done
rm -f sighandler.o

case "$h" in
  "") echo "Sorry, I can't determine the return type for signal handlers."
      echo "I'm assuming \"void\". If this seems to cause errors,"
      echo "try to change \"sighandler_return_type\" in s.h"
      h=void;;
   *) echo "The return type for signal handlers appears to be \"$h\".";;
esac
echo "#define sighandler_return_type $h" >> s.h

# Check the semantics of signal handlers

ostype=`uname`

if test "IRIX64" != "$ostype"; then
if sh runtest signals.c; then
  echo "Signals have the BSD semantics."
  echo "#define BSD_SIGNALS" >> s.h
else
  echo "Signals have the System V semantics."
fi
fi

if sh hasgot getgroups && test -f /usr/include/sys/param.h && grep -s NGROUPS /usr/include/sys/param.h >/dev/null;
then
  echo "getgroups() found."
  echo "#define HAS_GETGROUPS" >> s.h
fi

