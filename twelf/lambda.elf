%%*** The Lambda language of Moscow ML

%% We present the Lambda language in HOAS style rather than in
%%  De-Bruijn-indexing. I really hope there is a rather simple way to
%%  convert the following development into a De-Bruijn indexed variant
%%  while preserving the types.

%%% *** TYPE SYSTEM ***

%% Introduce a very simple type system (for now)
tp : type. %name tp T.
tp/unit : tp.
tp/bool : tp.
tp/nat : tp.
tp/char : tp.
tp/ref : tp -> tp.
tp/arrow : tp -> tp -> tp.

%%% *** SYNTAX ***

%% Special Constructors. These are nat, char, word, string, etc and
%%  represent these in the backend.
scon : tp -> type. %name scon SC.

scon/nat : nat -> scon tp/nat.
scon/char : nat -> scon tp/char.
scon/bool : bool -> scon tp/bool.
scon/unit : scon tp/unit.
%% ... There are more here, but we don't need it. We only need enough
%% to show that the type system is safe and thus we can utilize a
%% small set of Scons to show this.

%% Introduce lambda expressions of natural numbers
exp : tp -> type. %name exp E.
exp-list : type. %name exp-list EL.

exp-list/nil : exp-list.
exp-list/cons : exp T -> exp-list -> exp-list.

exp/scon : scon T -> exp T.
exp/lambda : (exp T -> exp T') -> exp (tp/arrow T T').
exp/letrec : (exp T -> exp T) -> exp T.
exp/let : exp T -> (exp T -> exp T') -> exp T'.
exp/apply  : exp (tp/arrow T T') -> exp T -> exp T'.
exp/if : exp tp/bool -> exp T -> exp T -> exp T.
exp/seq : exp T -> exp T' -> exp T'.
exp/andalso : exp tp/bool -> exp tp/bool -> exp tp/bool.
exp/orelse : exp tp/bool -> exp tp/bool -> exp tp/bool.
%% At the moment I don't need unspec
%% exp/unspec : exp tp/unit.
exp/while : exp tp/bool -> exp T -> exp tp/unit.
%% No need for primitives yet
%% exp/prim : primitive -> exp-list -> exp T.

%%% *** VALUES ***

%% Shortcuts for later work, should probably be moved to somewhere else.
v_true = (exp/scon (scon/bool true)).
v_false = (exp/scon (scon/bool false)).
v_unit = (exp/scon scon/unit).

%% Values in the language.
value : exp T -> type.
value/scon : value (exp/scon _).
value/lambda : value (exp/lambda [x] E x).

%%% *** SEMANTICS ***

%% Primitive evaluation contexts. This defines a context which is
%%  static while evaluation happens "in the hole" (which is a lambda
%%  in this game :) I first saw this idea when it was presented by
%%  Andrzej Filinski in a Twelf-course.  The cleverness is that we
%%  split "boring" evaluation from where the real stuff happens.
pctx : (exp T -> exp T') -> type.

pctx/apply-1 : pctx ([x : exp (tp/arrow T1 T2)] exp/apply x E2).
pctx/apply-2 : pctx ([x : exp T1] exp/apply V x)
		<- value V.

pctx/seq-1 : pctx ([x] exp/seq x E2).

pctx/if-tst : pctx ([x] exp/if x T F).
pctx/andalso-1 : pctx ([x] exp/andalso x E2).
pctx/orelse-1  : pctx ([x] exp/orelse x E2).
pctx/let       : pctx ([x] exp/let x B).

%% Introduce a (small-step) evaluation form
step : exp T -> exp T -> type.
%% Primitives are evaluated by this rule.
ev-primitive : primitive -> exp-list -> exp T -> type.

step/ctx : step (EC E) (EC E')
	    <- pctx EC
	    <- step E E'.

step/app-lam : step (exp/apply (exp/lambda [x] E1' x) V2) (E1' V2)
		<- value V2.
step/letrec : step (exp/letrec [x] E x) (E (exp/letrec [x] E x)).
step/let : step (exp/let L ([x] B x)) (B L)
	    <- value L.

step/seq : step (exp/seq V E2) E2
	    <- value V.
step/if-t : step (exp/if v_true T _) T.
step/if-f : step (exp/if v_false _ F) F.
step/andalso-1 : step (exp/andalso v_true E2) E2.
step/andalso-2 : step (exp/andalso v_false _) v_false.
step/orelse-1  : step (exp/orelse v_true _) v_true.
step/orelse-2  : step (exp/orelse v_false E2) E2.

step/while : step (exp/while T B) (exp/if T (exp/seq B (exp/while T B)) v_unit).

%% Comment primitives for now
%% step/primitive : step (exp/prim P EL) R
%% 		  <- ev-primitive P EL R.

%% Iterated step relation for completeness
steps : exp T -> exp T -> type.

steps_0 : steps E E.

steps_s : steps E E'
	   <- step E E''
	   <- steps E'' E'.

stepsto : exp T -> exp T -> type.

sto_do : stepsto E V
	  <- steps E V
	  <- value V.

%%% *** PROPERTIES ***

%%% Progress theorem

%% Factoring of values and steps, used in the progress theorem for output factoring.
progress-good : exp T -> type.
progress-good/value : progress-good V
		       <- value V.
progress-good/step : progress-good E
		      <- step E E'.

%% Lemma on if-expressions
progress-good_if : progress-good E -> progress-good (exp/if E E1 E2) -> type.
%mode +{T : tp} +{E : exp tp/bool} +{E1: exp T} +{E2: exp T}
      +{G : progress-good E} -{G' : progress-good (exp/if E E1 E2)}
		   progress-good_if G G'.

- : progress-good_if (progress-good/value VP)
       (progress-good/step step/if-t).
- : progress-good_if (progress-good/value VP)
       (progress-good/step step/if-f).
- : progress-good_if (progress-good/step SP)
       (progress-good/step (step/ctx SP pctx/if-tst)).
%worlds () (progress-good_if _ _).
%total E (progress-good_if E _).

%% Lemma on andalso
progress-good_andalso : progress-good E -> progress-good (exp/andalso E E2) -> type.
%mode +{E : exp tp/bool} +{E2 : exp tp/bool}
      +{G : progress-good E} -{G' : progress-good (exp/andalso E E2)}
            progress-good_andalso G G'.

- : progress-good_andalso (progress-good/value VP)
     (progress-good/step step/andalso-1).
- : progress-good_andalso (progress-good/value VP)
     (progress-good/step step/andalso-2).
- : progress-good_andalso (progress-good/step SP)
     (progress-good/step (step/ctx SP pctx/andalso-1)).
%worlds () (progress-good_andalso _ _).
%total E (progress-good_andalso E _).

%% Lemma on orelse
progress-good_orelse : progress-good E -> progress-good (exp/orelse E E2) -> type.
%mode +{E : exp tp/bool} +{E2 : exp tp/bool}
      +{G : progress-good E} -{G' : progress-good (exp/orelse E E2)}
            progress-good_orelse G G'.

- : progress-good_orelse (progress-good/value VP)
     (progress-good/step step/orelse-1).
- : progress-good_orelse (progress-good/value VP)
     (progress-good/step step/orelse-2).
- : progress-good_orelse (progress-good/step SP)
     (progress-good/step (step/ctx SP pctx/orelse-1)).
%worlds () (progress-good_orelse _ _).
%total E (progress-good_orelse E _).

%% Lemma on sequence
progress-good_seq : progress-good E -> progress-good (exp/seq E E2) -> type.
%mode +{T : tp} +{T' : tp} +{E : exp T} +{E2 : exp T'}
      +{G : progress-good E} -{G' : progress-good (exp/seq E E2)}
          progress-good_seq G G'.

- : progress-good_seq (progress-good/value VP)
     (progress-good/step (step/seq VP)).
- : progress-good_seq (progress-good/step SP)
     (progress-good/step (step/ctx SP pctx/seq-1)).
%worlds () (progress-good_seq _ _).
%total E (progress-good_seq E _).

%% Lemma on let
progress-good_let : progress-good E -> progress-good (exp/let E ([x] B x)) -> type.
%mode +{T : tp} +{T' : tp} +{E : exp T} +{B : exp T -> exp T'}
      +{G : progress-good E} -{G' : progress-good (exp/let E [x : exp T] B x)}
          progress-good_let G G'.

- : progress-good_let (progress-good/value VP)
     (progress-good/step (step/let VP)).
- : progress-good_let (progress-good/step SP)
     (progress-good/step (step/ctx SP pctx/let)).
%worlds () (progress-good_let _ _).
%total E (progress-good_let E _).

%% Lemma on apply
progress-good_apply : progress-good E1 -> progress-good E2
		         -> progress-good (exp/apply E1 E2) -> type.
%mode +{T : tp} +{T' : tp} +{E1 : exp (tp/arrow T T')} +{E2 : exp T}
      +{G : progress-good E1} +{G' : progress-good E2}
      -{G'' : progress-good (exp/apply E1 E2)}
      progress-good_apply G G' G''.

- : progress-good_apply (progress-good/step SP) _
     (progress-good/step (step/ctx SP pctx/apply-1)).
- : progress-good_apply (progress-good/value VP) (progress-good/step SP)
     (progress-good/step (step/ctx SP (pctx/apply-2 VP))).
- : progress-good_apply (progress-good/value VP1) (progress-good/value VP2)
     (progress-good/step (step/app-lam VP2)).

%worlds () (progress-good_apply _ _ _).
%total E (progress-good_apply E _ _).

progress : {E} progress-good E -> type.
%mode progress +E -G.

- : progress (exp/scon S) (progress-good/value value/scon).
- : progress (exp/lambda [x] E x) (progress-good/value value/lambda).
- : progress (exp/if E E1 E2) GP'
     <- progress E GP
     <- progress-good_if GP GP'.
- : progress (exp/andalso E E2) GP'
     <- progress E GP
     <- progress-good_andalso GP GP'.
- : progress (exp/orelse E E2) GP'
     <- progress E GP
     <- progress-good_orelse GP GP'.
- : progress (exp/seq E E2) GP'
     <- progress E GP
     <- progress-good_seq GP GP'.
- : progress (exp/let E E2) GP'
     <- progress E GP
     <- progress-good_let GP GP'.
- : progress (exp/apply E1 E2) GP
     <- progress E1 GP1
     <- progress E2 GP2
     <- progress-good_apply GP1 GP2 GP.
- : progress (exp/while T B) (progress-good/step step/while).
- : progress (exp/letrec [x] E1 x) (progress-good/step step/letrec).

%worlds () (progress _ _).
%total E (progress E _).




